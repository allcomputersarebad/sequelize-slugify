name: Continuous Integration
on: [push]

jobs:
  lint:
    name: Code Linting - ${{ matrix.node-versions.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-versions:
          - {name: 'Node 10', version: '10'}
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - run: npm run lint:report
      - name: Annotate Code Linting Results
        uses: ataylorme/eslint-annotate-action@1.1.2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "eslint_report.json"

  test-sqlite:
    name: Test - ${{ matrix.node-versions.name }}/SQLite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-versions:
          - {name: 'Node 10', version: '10'}
          - {name: 'Node 12', version: '12'}
          - {name: 'Node 14', version: '14'}
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - run: npm run test:sqlite
      - name: report coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: npm run report-coverage

  test-pg:
    name: Test - ${{ matrix.node-versions.name }}/${{ matrix.postgres-versions.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-versions:
          - {name: 'Node 10', version: '10'}
        postgres-versions:
          - {name: 'Postgres 9.5', version: '9.5'}
          - {name: 'Postgres 10', version: '10'}
          - {name: 'Postgres 11', version: '11'}
          - {name: 'Postgres 12', version: '12'}
    services:
      postgres:
        image: postgres:${{ matrix.postgres-versions.version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sequelize_slugify_test
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - name: run tests
        env:
          DB_PW: postgres
        run: npm run test:pg
      - name: report coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: npm run report-coverage

  test-mysql:
    name: Test - ${{ matrix.node-versions.name }}/${{ matrix.mysql-versions.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-versions:
          - {name: 'Node 10', version: '10'}
        mysql-versions:
          - {name: 'MySQL 5.7', version: '5.7'}
          - {name: 'MySQL 8', version: '8'}
    services:
      mysql:
        image: mysql:${{ matrix.mysql-versions.version }}
        env:
          MYSQL_ROOT_PASSWORD: rootroot
          MYSQL_DATABASE: sequelize_slugify_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2
      - name: Installing ${{ matrix.node-versions.name }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions.version }}
      - run: npm ci
      - name: run tests
        run: npm run test:mysql
      - name: report coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: npm run report-coverage
